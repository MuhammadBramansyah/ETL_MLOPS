# -*- coding: utf-8 -*-
"""MLOPS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1twi5lJGkbk03v1EGLjCqPkiyCvZtIPwQ
"""

import pickle
import time

import pandas as pd
import numpy as np 

#import warnings
#warnings.filterwarnings("ignore")

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

def loadData(filename):
  cols = ['label', 'Age', 'Language', 'Sex','Has_Credit','Region']

  df = pd \
          .read_csv(filename)[cols]
  return df

## preprocessing data
def PreprocessingData(data):
  labelage = StandardScaler()
  AgeScaler = labelage.fit_transform(data[["Age"]])
  pickle.dump(AgeScaler,open("labelage.pkl","wb"))

  labellanguage = LabelEncoder()
  LanguageEncoder = labellanguage.fit_transform(data[["Language"]])
  pickle.dump(LanguageEncoder,open("labellanguage.pkl","wb"))

  labelsex = LabelEncoder()
  SexEncoder = labelsex.fit_transform(data[["Sex"]])
  pickle.dump(SexEncoder,open("labelsex.pkl","wb"))

  labelhascredit = LabelEncoder()
  HasCreditEncoder = labelhascredit.fit_transform(data[["Language"]])
  pickle.dump(HasCreditEncoder,open("labelhascredit.pkl","wb"))

  labelregion = OneHotEncoder()
  RegionEncoder = labelregion.fit_transform(data[["Region"]].values).toarray()
  pickle.dump(RegionEncoder,open("labelregion.pkl","wb"))

  data["AgeScaler"] = AgeScaler 
  data["LanguageEncoder"] = LanguageEncoder
  data["HasCreditEncoder"] = HasCreditEncoder
  data["SexEncoder"] = SexEncoder

  dfRegion = pd.DataFrame(RegionEncoder, columns = ["RegionEncoder_"+str(i) for i in range(len(RegionEncoder[0]))])
  data = pd.concat([data,dfRegion], axis = 1)

  X = data.drop(["Age", "Language", "Sex", "Has_Credit", "Region","label"], axis = 1).values
  y = data[["label"]].values

  return X,y

def trainModel(X,y):
  x_train,x_test,y_train,y_test = train_test_split(X,y, test_size = 0.2, random_state = 0)
  start = time.time()
  model = DecisionTreeClassifier()
  model.fit(x_train,y_train)
  pickle.dump(model,open("modelDecissionTree.pkl","wb"))
  stop = time.time()
  print(f"model done in {stop-start} sekon")

y_predict = model.predict(x_test)
print(classification_report(y_test,y_predict))

if __name__ == "__main__":
  filename = "data_train.csv"

  data = loadData(filename)
  X,y = PreprocessingData(data)
  trainModel(X,y)

